{"version":3,"sources":["components/api-authorization/ApiAuthorizationConstants.js","components/api-authorization/AuthorizeService.js","components/api-authorization/LoginMenu.js","components/NavMenu.js","components/Layout.js","components/RockLike.jsx","components/Home.js","components/FetchData.js","components/Counter.js","components/api-authorization/AuthorizeRoute.js","components/api-authorization/Login.js","components/api-authorization/Logout.js","components/api-authorization/ApiAuthorizationRoutes.js","App.js","index.js"],"names":["QueryParameterNames","LogoutActions","LoginActions","prefix","ApplicationPaths","DefaultLoginRedirectPath","ApiAuthorizationClientConfigurationUrl","ApiAuthorizationPrefix","Login","LoginFailed","LoginCallback","Register","Profile","LogOut","LoggedOut","LogOutCallback","IdentityRegisterPath","IdentityManagePath","authService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","this","getUser","user","profile","ensureUserManagerInitialized","userManager","access_token","state","signinSilent","createArguments","silentUser","updateState","success","console","log","Error","signinPopup","popUpUser","message","error","signinRedirect","redirect","url","signinCallback","signoutPopup","undefined","signoutRedirect","signoutCallback","response","data","notifySubscribers","callback","push","subscription","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ok","json","settings","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","WebStorageStateStore","UserManager","events","addUserSignedOut","a","removeUser","LoginMenu","props","isAuthenticated","userName","_subscription","subscribe","populateState","unsubscribe","Promise","all","setState","name","profilePath","logoutPath","pathname","local","authenticatedView","registerPath","loginPath","anonymousView","NavItem","NavLink","tag","Link","className","to","Component","NavMenu","toggleNavbar","bind","collapsed","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","displayName","Layout","children","RockLike","likes","loading","addLike","populateLikesCount","getAccessToken","token","urlatual","window","location","href","site","Url","requestOptions","method","headers","body","JSON","stringify","indexOf","statusRequest","spanCurtidas","erro","likeCount","style","borderTop","marginLeft","marginRight","color","renderButtonLikeCount","Home","FetchData","forecasts","populateWeatherData","contents","renderForecastsTable","id","aria-labelledby","forecast","key","date","temperatureC","temperatureF","summary","Counter","currentCount","incrementCounter","aria-live","AuthorizeRoute","ready","authenticated","authenticationChanged","populateAuthenticationState","link","document","createElement","path","returnUrl","protocol","host","search","hash","redirectUrl","encodeURIComponent","component","rest","render","action","login","getReturnUrl","processLoginCallback","URLSearchParams","get","redirectToProfile","redirectToRegister","signIn","result","navigateToReturnUrl","completeSignIn","fromQuery","startsWith","origin","redirectToApiAuthorizationPath","encodeURI","apiAuthorizationPath","replace","Logout","isReady","history","logout","processLogoutCallback","signOut","completeSignOut","ApiAuthorizationRoutes","loginAction","logoutAction","App","exact","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","basename"],"mappings":"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","file":"static/js/main.1af3b43d.chunk.js","sourcesContent":["export const ApplicationName = 'RockLike';\r\n\r\nexport const QueryParameterNames = {\r\n  ReturnUrl: 'returnUrl',\r\n  Message: 'message'\r\n};\r\n\r\nexport const LogoutActions = {\r\n  LogoutCallback: 'logout-callback',\r\n  Logout: 'logout',\r\n  LoggedOut: 'logged-out'\r\n};\r\n\r\nexport const LoginActions = {\r\n  Login: 'login',\r\n  LoginCallback: 'login-callback',\r\n  LoginFailed: 'login-failed',\r\n  Profile: 'profile',\r\n  Register: 'register'\r\n};\r\n\r\nconst prefix = '/authentication';\r\n\r\nexport const ApplicationPaths = {\r\n  DefaultLoginRedirectPath: '/',\r\n  ApiAuthorizationClientConfigurationUrl: `_configuration/${ApplicationName}`,\r\n  ApiAuthorizationPrefix: prefix,\r\n  Login: `${prefix}/${LoginActions.Login}`,\r\n  LoginFailed: `${prefix}/${LoginActions.LoginFailed}`,\r\n  LoginCallback: `${prefix}/${LoginActions.LoginCallback}`,\r\n  Register: `${prefix}/${LoginActions.Register}`,\r\n  Profile: `${prefix}/${LoginActions.Profile}`,\r\n  LogOut: `${prefix}/${LogoutActions.Logout}`,\r\n  LoggedOut: `${prefix}/${LogoutActions.LoggedOut}`,\r\n  LogOutCallback: `${prefix}/${LogoutActions.LogoutCallback}`,\r\n  IdentityRegisterPath: 'Identity/Account/Register',\r\n  IdentityManagePath: 'Identity/Account/Manage'\r\n};\r\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\r\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\r\n\r\nexport class AuthorizeService {\r\n    _callbacks = [];\r\n    _nextSubscriptionId = 0;\r\n    _user = null;\r\n    _isAuthenticated = false;\r\n\r\n    // By default pop ups are disabled because they don't work properly on Edge.\r\n    // If you want to enable pop up authentication simply set this flag to false.\r\n    _popUpDisabled = true;\r\n\r\n    async isAuthenticated() {\r\n        const user = await this.getUser();\r\n        return !!user;\r\n    }\r\n\r\n    async getUser() {\r\n        if (this._user && this._user.profile) {\r\n            return this._user.profile;\r\n        }\r\n\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.profile;\r\n    }\r\n\r\n    async getAccessToken() {\r\n        await this.ensureUserManagerInitialized();\r\n        const user = await this.userManager.getUser();\r\n        return user && user.access_token;\r\n    }\r\n\r\n    // We try to authenticate the user in three different ways:\r\n    // 1) We try to see if we can authenticate the user silently. This happens\r\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\r\n    //    on the client.\r\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\r\n    //    redirect flow.\r\n    async signIn(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\r\n            this.updateState(silentUser);\r\n            return this.success(state);\r\n        } catch (silentError) {\r\n            // User might not be authenticated, fallback to popup authentication\r\n            console.log(\"Silent authentication error: \", silentError);\r\n\r\n            try {\r\n                if (this._popUpDisabled) {\r\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n                }\r\n\r\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\r\n                this.updateState(popUpUser);\r\n                return this.success(state);\r\n            } catch (popUpError) {\r\n                if (popUpError.message === \"Popup window closed\") {\r\n                    // The user explicitly cancelled the login action by closing an opened popup.\r\n                    return this.error(\"The user closed the window.\");\r\n                } else if (!this._popUpDisabled) {\r\n                    console.log(\"Popup authentication error: \", popUpError);\r\n                }\r\n\r\n                // PopUps might be blocked by the user, fallback to redirect\r\n                try {\r\n                    await this.userManager.signinRedirect(this.createArguments(state));\r\n                    return this.redirect();\r\n                } catch (redirectError) {\r\n                    console.log(\"Redirect authentication error: \", redirectError);\r\n                    return this.error(redirectError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignIn(url) {\r\n        try {\r\n            await this.ensureUserManagerInitialized();\r\n            const user = await this.userManager.signinCallback(url);\r\n            this.updateState(user);\r\n            return this.success(user && user.state);\r\n        } catch (error) {\r\n            console.log('There was an error signing in: ', error);\r\n            return this.error('There was an error signing in.');\r\n        }\r\n    }\r\n\r\n    // We try to sign out the user in two different ways:\r\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\r\n    //    Pop-Up blocker or the user has disabled PopUps.\r\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\r\n    //    post logout redirect flow.\r\n    async signOut(state) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            if (this._popUpDisabled) {\r\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\r\n            }\r\n\r\n            await this.userManager.signoutPopup(this.createArguments());\r\n            this.updateState(undefined);\r\n            return this.success(state);\r\n        } catch (popupSignOutError) {\r\n            console.log(\"Popup signout error: \", popupSignOutError);\r\n            try {\r\n                await this.userManager.signoutRedirect(this.createArguments(state));\r\n                return this.redirect();\r\n            } catch (redirectSignOutError) {\r\n                console.log(\"Redirect signout error: \", redirectSignOutError);\r\n                return this.error(redirectSignOutError);\r\n            }\r\n        }\r\n    }\r\n\r\n    async completeSignOut(url) {\r\n        await this.ensureUserManagerInitialized();\r\n        try {\r\n            const response = await this.userManager.signoutCallback(url);\r\n            this.updateState(null);\r\n            return this.success(response && response.data);\r\n        } catch (error) {\r\n            console.log(`There was an error trying to log out '${error}'.`);\r\n            return this.error(error);\r\n        }\r\n    }\r\n\r\n    updateState(user) {\r\n        this._user = user;\r\n        this._isAuthenticated = !!this._user;\r\n        this.notifySubscribers();\r\n    }\r\n\r\n    subscribe(callback) {\r\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\r\n        return this._nextSubscriptionId - 1;\r\n    }\r\n\r\n    unsubscribe(subscriptionId) {\r\n        const subscriptionIndex = this._callbacks\r\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\r\n            .filter(element => element.found === true);\r\n        if (subscriptionIndex.length !== 1) {\r\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\r\n        }\r\n\r\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\r\n    }\r\n\r\n    notifySubscribers() {\r\n        for (let i = 0; i < this._callbacks.length; i++) {\r\n            const callback = this._callbacks[i].callback;\r\n            callback();\r\n        }\r\n    }\r\n\r\n    createArguments(state) {\r\n        return { useReplaceToNavigate: true, data: state };\r\n    }\r\n\r\n    error(message) {\r\n        return { status: AuthenticationResultStatus.Fail, message };\r\n    }\r\n\r\n    success(state) {\r\n        return { status: AuthenticationResultStatus.Success, state };\r\n    }\r\n\r\n    redirect() {\r\n        return { status: AuthenticationResultStatus.Redirect };\r\n    }\r\n\r\n    async ensureUserManagerInitialized() {\r\n        if (this.userManager !== undefined) {\r\n            return;\r\n        }\r\n\r\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\r\n        if (!response.ok) {\r\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\r\n        }\r\n\r\n        let settings = await response.json();\r\n        settings.automaticSilentRenew = true;\r\n        settings.includeIdTokenInSilentRenew = true;\r\n        settings.userStore = new WebStorageStateStore({\r\n            prefix: ApplicationName\r\n        });\r\n\r\n        this.userManager = new UserManager(settings);\r\n\r\n        this.userManager.events.addUserSignedOut(async () => {\r\n            await this.userManager.removeUser();\r\n            this.updateState(undefined);\r\n        });\r\n    }\r\n\r\n    static get instance() { return authService }\r\n}\r\n\r\nconst authService = new AuthorizeService();\r\n\r\nexport default authService;\r\n\r\nexport const AuthenticationResultStatus = {\r\n    Redirect: 'redirect',\r\n    Success: 'success',\r\n    Fail: 'fail'\r\n};\r\n","import React, { Component, Fragment } from 'react';\r\nimport { NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport authService from './AuthorizeService';\r\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\nexport class LoginMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isAuthenticated: false,\r\n            userName: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.populateState());\r\n        this.populateState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    async populateState() {\r\n        const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()])\r\n        this.setState({\r\n            isAuthenticated,\r\n            userName: user && user.name\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isAuthenticated, userName } = this.state;\r\n        if (!isAuthenticated) {\r\n            const registerPath = `${ApplicationPaths.Register}`;\r\n            const loginPath = `${ApplicationPaths.Login}`;\r\n            return this.anonymousView(registerPath, loginPath);\r\n        } else {\r\n            const profilePath = `${ApplicationPaths.Profile}`;\r\n            const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\r\n            return this.authenticatedView(userName, profilePath, logoutPath);\r\n        }\r\n    }\r\n\r\n    authenticatedView(userName, profilePath, logoutPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={profilePath}>Hello {userName}</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={logoutPath}>Logout</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n\r\n    }\r\n\r\n    anonymousView(registerPath, loginPath) {\r\n        return (<Fragment>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={registerPath}>Register</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n                <NavLink tag={Link} className=\"text-dark\" to={loginPath}>Login</NavLink>\r\n            </NavItem>\r\n        </Fragment>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { LoginMenu } from './api-authorization/LoginMenu';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">RockLike</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/Counter\">Counter</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                                </NavItem>\r\n                                <LoginMenu>\r\n                                </LoginMenu>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n                {this.props.children}               \r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport authService from './api-authorization/AuthorizeService'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport class RockLike extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { likes: 0, loading: true };\r\n        this.addLike = this.addLike.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.populateLikesCount();\r\n    }\r\n\r\n    async addLike() {\r\n        let token = await authService.getAccessToken();\r\n        let url = \"SiteLikes/PostSiteLike\";\r\n        let urlatual = window.location.href;\r\n        let site = {\r\n            Url: urlatual\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(site)\r\n        };\r\n        debugger;\r\n        const response = await fetch(url, requestOptions)\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            this.setState({ likes: data, loading: false });\r\n        }\r\n        else if ([401].indexOf(response.status) !== -1) {\r\n            this.setState({ loading: false, statusRequest:401 });\r\n        }\r\n    };\r\n\r\n    refreshPage() {\r\n        this.populateLikesCount();\r\n    }\r\n\r\n    renderButtonLikeCount() {\r\n        var spanCurtidas;\r\n        var erro;\r\n        let likeCount = this.state.likes;\r\n        if (likeCount === 0)\r\n            spanCurtidas = \"Seja o primeiro a curtir!\"\r\n        else\r\n            spanCurtidas = likeCount === 1 ? `${likeCount} Curtida` : `${likeCount} Curtidas`;\r\n        if (this.state.statusRequest == 401)\r\n            erro = \"Favor realizar login para Curtir!\"\r\n\r\n        return (\r\n\r\n            <div style={{ borderTop: \"2px solid #fff \" }} >\r\n                <button className=\"button\" onClick={this.addLike}>\r\n                    Curtir\r\n                 </button>\r\n                <span style={{ marginLeft: 20, marginRight: 20 }} >{spanCurtidas}</span>\r\n                <span style={{ marginLeft: 20, marginRight: 20, color: 'red' }} >{erro}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let contents = this.state.loading\r\n            ? <p><em>Loading...</em></p>\r\n            : this.renderButtonLikeCount();\r\n\r\n        return (contents);\r\n\r\n    }\r\n\r\n    async populateLikesCount() {\r\n\r\n\r\n        let url = `SiteLikes/GetSiteLikeCount?url=${window.location.href}`;\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState({ likes: data, loading: false });\r\n\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { RockLike } from './RockLike';\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Hello, world!</h1>\r\n                <p>Welcome to your new single-page application, built with:</p>\r\n                <ul>\r\n                    <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n                    <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n                    <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n                </ul>\r\n                <p>To help you get started, we have also set up:</p>\r\n                <ul>\r\n                    <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n                    <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n                    <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n                </ul>\r\n                <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n                <RockLike />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport authService from './api-authorization/AuthorizeService'\r\nimport { RockLike } from './RockLike';\r\nexport class FetchData extends Component {\r\n    static displayName = FetchData.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { forecasts: [], loading: true };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.populateWeatherData();\r\n    }\r\n\r\n    static renderForecastsTable(forecasts) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Temp. (C)</th>\r\n                        <th>Temp. (F)</th>\r\n                        <th>Summary</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {forecasts.map(forecast =>\r\n                        <tr key={forecast.date}>\r\n                            <td>{forecast.date}</td>\r\n                            <td>{forecast.temperatureC}</td>\r\n                            <td>{forecast.temperatureF}</td>\r\n                            <td>{forecast.summary}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let contents = this.state.loading\r\n            ? <p><em>Loading...</em></p>\r\n            : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n        return (\r\n            <div>\r\n                <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n                <p>This component demonstrates fetching data from the server.</p>\r\n                {contents}\r\n                <RockLike />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    async populateWeatherData() {\r\n        const token = await authService.getAccessToken();\r\n        const response = await fetch('weatherforecast', {\r\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n        });\r\n        const data = await response.json();\r\n        this.setState({ forecasts: data, loading: false });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { RockLike } from './RockLike';\r\nexport class Counter extends Component {\r\n    static displayName = Counter.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { currentCount: 0 };\r\n        this.incrementCounter = this.incrementCounter.bind(this);\r\n    }\r\n\r\n    incrementCounter() {\r\n        this.setState({\r\n            currentCount: this.state.currentCount + 1\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Counter</h1>\r\n\r\n                <p>This is a simple example of a React component.</p>\r\n\r\n                <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n                <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n                <RockLike />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants'\r\nimport authService from './AuthorizeService'\r\n\r\nexport default class AuthorizeRoute extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ready: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._subscription = authService.subscribe(() => this.authenticationChanged());\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        authService.unsubscribe(this._subscription);\r\n    }\r\n\r\n    render() {\r\n        const { ready, authenticated } = this.state;\r\n        var link = document.createElement(\"a\");\r\n        link.href = this.props.path;\r\n        const returnUrl = `${link.protocol}//${link.host}${link.pathname}${link.search}${link.hash}`;\r\n        const redirectUrl = `${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURIComponent(returnUrl)}`\r\n        if (!ready) {\r\n            return <div></div>;\r\n        } else {\r\n            const { component: Component, ...rest } = this.props;\r\n            return <Route {...rest}\r\n                render={(props) => {\r\n                    if (authenticated) {\r\n                        return <Component {...props} />\r\n                    } else {\r\n                        return <Redirect to={redirectUrl} />\r\n                    }\r\n                }} />\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ ready: true, authenticated });\r\n    }\r\n\r\n    async authenticationChanged() {\r\n        this.setState({ ready: false, authenticated: false });\r\n        await this.populateAuthenticationState();\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\nexport class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LoginActions.Login:\r\n                this.login(this.getReturnUrl());\r\n                break;\r\n            case LoginActions.LoginCallback:\r\n                this.processLoginCallback();\r\n                break;\r\n            case LoginActions.LoginFailed:\r\n                const params = new URLSearchParams(window.location.search);\r\n                const error = params.get(QueryParameterNames.Message);\r\n                this.setState({ message: error });\r\n                break;\r\n            case LoginActions.Profile:\r\n                this.redirectToProfile();\r\n                break;\r\n            case LoginActions.Register:\r\n                this.redirectToRegister();\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const action = this.props.action;\r\n        const { message } = this.state;\r\n\r\n        if (!!message) {\r\n            return <div>{message}</div>\r\n        } else {\r\n            switch (action) {\r\n                case LoginActions.Login:\r\n                    return (<div>Processing login</div>);\r\n                case LoginActions.LoginCallback:\r\n                    return (<div>Processing login callback</div>);\r\n                case LoginActions.Profile:\r\n                case LoginActions.Register:\r\n                    return (<div></div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async login(returnUrl) {\r\n        const state = { returnUrl };\r\n        const result = await authService.signIn(state);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                break;\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(returnUrl);\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid status result ${result.status}.`);\r\n        }\r\n    }\r\n\r\n    async processLoginCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignIn(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeSignIn finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\r\n        }\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\r\n    }\r\n\r\n    redirectToRegister() {\r\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\r\n    }\r\n\r\n    redirectToProfile() {\r\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n    }\r\n\r\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\r\n        const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n        // It's important that we do a replace here so that when the user hits the back arrow on the\r\n        // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n        // component.\r\n        window.location.replace(redirectUrl);\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        // It's important that we do a replace here so that we remove the callback uri with the\r\n        // fragment containing the tokens from the browser history.\r\n        window.location.replace(returnUrl);\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\nimport authService from './AuthorizeService';\r\nimport { AuthenticationResultStatus } from './AuthorizeService';\r\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\r\n\r\n// The main responsibility of this component is to handle the user's logout process.\r\n// This is the starting point for the logout process, which is usually initiated when a\r\n// user clicks on the logout button on the LoginMenu component.\r\nexport class Logout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: undefined,\r\n            isReady: false,\r\n            authenticated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const action = this.props.action;\r\n        switch (action) {\r\n            case LogoutActions.Logout:\r\n                if (!!window.history.state.state.local) {\r\n                    this.logout(this.getReturnUrl());\r\n                } else {\r\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\r\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\r\n                }\r\n                break;\r\n            case LogoutActions.LogoutCallback:\r\n                this.processLogoutCallback();\r\n                break;\r\n            case LogoutActions.LoggedOut:\r\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid action '${action}'`);\r\n        }\r\n\r\n        this.populateAuthenticationState();\r\n    }\r\n\r\n    render() {\r\n        const { isReady, message } = this.state;\r\n        if (!isReady) {\r\n            return <div></div>\r\n        }\r\n        if (!!message) {\r\n            return (<div>{message}</div>);\r\n        } else {\r\n            const action = this.props.action;\r\n            switch (action) {\r\n                case LogoutActions.Logout:\r\n                    return (<div>Processing logout</div>);\r\n                case LogoutActions.LogoutCallback:\r\n                    return (<div>Processing logout callback</div>);\r\n                case LogoutActions.LoggedOut:\r\n                    return (<div>{message}</div>);\r\n                default:\r\n                    throw new Error(`Invalid action '${action}'`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async logout(returnUrl) {\r\n        const state = { returnUrl };\r\n        const isauthenticated = await authService.isAuthenticated();\r\n        if (isauthenticated) {\r\n            const result = await authService.signOut(state);\r\n            switch (result.status) {\r\n                case AuthenticationResultStatus.Redirect:\r\n                    break;\r\n                case AuthenticationResultStatus.Success:\r\n                    await this.navigateToReturnUrl(returnUrl);\r\n                    break;\r\n                case AuthenticationResultStatus.Fail:\r\n                    this.setState({ message: result.message });\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Invalid authentication result status.\");\r\n            }\r\n        } else {\r\n            this.setState({ message: \"You successfully logged out!\" });\r\n        }\r\n    }\r\n\r\n    async processLogoutCallback() {\r\n        const url = window.location.href;\r\n        const result = await authService.completeSignOut(url);\r\n        switch (result.status) {\r\n            case AuthenticationResultStatus.Redirect:\r\n                // There should not be any redirects as the only time completeAuthentication finishes\r\n                // is when we are doing a redirect sign in flow.\r\n                throw new Error('Should not redirect.');\r\n            case AuthenticationResultStatus.Success:\r\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n                break;\r\n            case AuthenticationResultStatus.Fail:\r\n                this.setState({ message: result.message });\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid authentication result status.\");\r\n        }\r\n    }\r\n\r\n    async populateAuthenticationState() {\r\n        const authenticated = await authService.isAuthenticated();\r\n        this.setState({ isReady: true, authenticated });\r\n    }\r\n\r\n    getReturnUrl(state) {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\r\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\r\n            // This is an extra check to prevent open redirects.\r\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\r\n        }\r\n        return (state && state.returnUrl) ||\r\n            fromQuery ||\r\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\r\n    }\r\n\r\n    navigateToReturnUrl(returnUrl) {\r\n        return window.location.replace(returnUrl);\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Login } from './Login'\r\nimport { Logout } from './Logout'\r\nimport { ApplicationPaths, LoginActions, LogoutActions } from './ApiAuthorizationConstants';\r\n\r\nexport default class ApiAuthorizationRoutes extends Component {\r\n\r\n  render () {\r\n    return(\r\n      <Fragment>\r\n          <Route path={ApplicationPaths.Login} render={() => loginAction(LoginActions.Login)} />\r\n          <Route path={ApplicationPaths.LoginFailed} render={() => loginAction(LoginActions.LoginFailed)} />\r\n          <Route path={ApplicationPaths.LoginCallback} render={() => loginAction(LoginActions.LoginCallback)} />\r\n          <Route path={ApplicationPaths.Profile} render={() => loginAction(LoginActions.Profile)} />\r\n          <Route path={ApplicationPaths.Register} render={() => loginAction(LoginActions.Register)} />\r\n          <Route path={ApplicationPaths.LogOut} render={() => logoutAction(LogoutActions.Logout)} />\r\n          <Route path={ApplicationPaths.LogOutCallback} render={() => logoutAction(LogoutActions.LogoutCallback)} />\r\n          <Route path={ApplicationPaths.LoggedOut} render={() => logoutAction(LogoutActions.LoggedOut)} />\r\n      </Fragment>);\r\n  }\r\n}\r\n\r\nfunction loginAction(name){\r\n    return (<Login action={name}></Login>);\r\n}\r\n\r\nfunction logoutAction(name) {\r\n    return (<Logout action={name}></Logout>);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport { Counter } from './components/Counter';\r\nimport AuthorizeRoute from './components/api-authorization/AuthorizeRoute';\r\nimport ApiAuthorizationRoutes from './components/api-authorization/ApiAuthorizationRoutes';\r\nimport { ApplicationPaths } from './components/api-authorization/ApiAuthorizationConstants';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Route exact path='/' component={Home} />\r\n                <AuthorizeRoute path='/fetch-data' component={FetchData} />\r\n                <Route path='/counter' component={Counter} />\r\n                <Route path={ApplicationPaths.ApiAuthorizationPrefix} component={ApiAuthorizationRoutes} />\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\n//import registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\n// Uncomment the line above that imports the registerServiceWorker function\r\n// and the line below to register the generated service worker.\r\n// By default create-react-app includes a service worker to improve the\r\n// performance of the application by caching static assets. This service\r\n// worker can interfere with the Identity UI, so it is\r\n// disabled by default when Identity is being used.\r\n//\r\n//registerServiceWorker();\r\n\r\n"],"sourceRoot":""}